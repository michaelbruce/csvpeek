#!/usr/bin/env bash
# vim: set ft=ruby:

# First pass at a fullscreen terminal application,
# based on Gary Bernhardt's selecta
# http://graysoftinc.com/terminal-tricks/random-access-terminal
# http://misc.flogisoft.com/bash/tip_colors_and_formatting
#
# 1. Get a fullscreen TTY - $stdout.write "#{CSI}2J"    # clear screen
# 2. read csv
# 3. present in the style of more, vi bindings etc

exec /usr/bin/env ruby --disable-gems -x "$0" $*
#!ruby
# --------------------------------------------------------------------------------

require 'csv'
require 'io/console'
require "io/wait"

KEY_CTRL_C = ?\C-c
KEY_CTRL_Q = ?\C-q
KEY_CTRL_N = ?\C-n
KEY_CTRL_P = ?\C-p
KEY_CTRL_U = ?\C-u
KEY_CTRL_H = ?\C-h
KEY_CTRL_W = ?\C-w
KEY_CTRL_J = ?\C-j
KEY_CTRL_M = ?\C-m
KEY_DELETE = 127.chr # Equivalent to ?\C-?
CSI = "\e["

# $stdout.write "#{CSI}1;4H"  # move to line 1, character 4
# $stdout.write "s"           # overwrite the 'z'

class UserInput
  def initialize
    $stdin.raw do |io|
      last_read = Time.now
      prompted  = false
      loop do
        char = io.ready? && io.sysread(1)
        if char
          last_read = Time.now
          prompted  = false
          case char
          when "h"
            $stdout.write "#{CSI}D"
          when "j"
            $stdout.write "#{CSI}B"
          when "k"
            $stdout.write "#{CSI}A"
          when "l"
            $stdout.write "#{CSI}C"
          when "?"
            # TODO display the keymap to the user
            StatusDisplay.write "I will display the keymap someday soon..."
          when "q"
            StatusDisplay.write "Are you sure you want to quit? (y or n)"
            char = io.sysread(1)
            $screen.close if char == "y"
          when ","
            puts $screen.get_cursor_position
          when ":"
            $screen.move_to_last_line
            print ':'
          else
            StatusDisplay.write "You typed:  #{char.inspect}"
            # TODO display message "You can clear this debug output with <ESC>"
          end
        else
          if !prompted && Time.now - last_read > 1
            # puts "Please type a character.\r\n"
            prompted = true
          end
          sleep 1.0/24.0
        end
      end
    end
  end
end

def csv_read(filename)
  CSV.read(
      filename,
      {headers: true,
      encoding: 'utf-8',
      converters: lambda { |value| (value.nil? || value.downcase == 'null') ? '' : value.strip }})
end

class Screen
  def initialize
    clear_screen
  end

  def clear_screen
    $stdout.write "#{CSI}2J"    # clear screen
    $stdout.write "#{CSI}1;1H"  # move to top left corner
  end

  def move_to_beginning_of_line
    $stdout.write "#{CSI}#{get_cursor_position[:column]}D"
  end

  def move_to_last_line
    cursor = get_cursor_position
    $stdout.write "#{CSI}#{($terminal_height - cursor[:row])}B"
    $stdout.write "#{CSI}#{cursor[:column]}D"
  end

  def save_cursor_position
    $stdout.write "#{CSI}s"     # save cursor position
  end

  def restore_cursor_position
    $stdout.write "#{CSI}u"     # restore cursor position
  end

  def get_cursor_position
    res = ''
    $stdin.raw do |stdin|
      $stdout << "\e[6n"
      $stdout.flush
      while (c = stdin.getc) != 'R'
        res << c if c
      end
    end
    m = res.match /(?<row>\d+);(?<column>\d+)/
    { row: Integer(m[:row]), column: Integer(m[:column]) }
  end

  def close
    move_to_last_line
    exit
  end
end

class StatusDisplay
  def self.write(message)
    $screen.save_cursor_position
    $screen.move_to_last_line
    $stdout.write " " * $terminal_height
    $screen.move_to_beginning_of_line
    $stdout.write message
    $screen.restore_cursor_position
  end
end

class SheetRender
  def initialize(csv_data)
    @csv_data = csv_data
  end

  def rows
    @csv_data.to_a.map do |row|
      row.each_with_index.map do |cell, i|
        format_cell(cell, max_column_width(i))
      end
    end
  end

  def seperator
    '--------------------------------------------------------------------------------'
  end

  def max_column_width(index)
    lengths = @csv_data.to_a.map { |line| line[index] }
    lengths.map(&:length).max
  end

  def format_cell(value, column_width)
    value + (' ' * (column_width - value.length))
  end

  def line(line)
    line.join(" | ")
  end

  def pretty_output
    formatted_rows = rows
    puts formatted_rows[0].join(' | ')
    puts seperator
    puts formatted_rows[1..-1].map { |row| row.join(' | ') }
  end
end

$screen = Screen.new

sample_file = csv_read('sample.csv')
render = SheetRender.new(sample_file)

render.pretty_output

IO.console
# gets # stops program immediately exiting
$terminal_height = `tput cols`.to_i
StatusDisplay.write('CSV File Loaded')
UserInput.new
